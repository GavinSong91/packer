apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

println("app build.gradle 开始配置")

project.afterEvaluate {
    println "所有模块都已配置完成"
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.gavin.packer"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //360jiagu
    task packers360jiagu() {
        group "packerapk"
        doFirst {
            println "packerapk==============360jiagu start"
        }
        doLast {
            //待加固apk
            def releaseApk = new File(rootProject.app['releasePath'])
            def packersApk = new File(rootProject.app['packersPath'])
            println rootProject.app['releasePath']
            println releaseApk.getCanonicalPath()
            println releaseApk.exists()
            if (!releaseApk.exists()) {
                println "apk not exist , please check it"
                return
            }
            //360加固命令，，
            def cmdBase = 'java -jar jiagu.jar'
            def cmdLogin = "$cmdBase -login  ${rootProject.packers["account"]}  ${rootProject.packers["password"]}"
            def cmdImportSign = "$cmdBase -importsign  ${rootProject.signing["keyAlias"]}" + "  " +
                    " ${rootProject.signing["keyPassword"]}  ${rootProject.signing["storeFile"]}  ${rootProject.signing["storePassword"]}"
            def cmdShowmulpkg = "$cmdBase -showmulpkg"
            def cmdDeletemulpkg = "$cmdBase -deletemulpkg"
            def cmdImportmulpkg = "$cmdBase -importmulpkg  ${rootProject.packers["channelConfigPath"]}"
            def cmdJiaGu = "$cmdBase  -jiagu  ${releaseApk.getCanonicalPath()}  ${packersApk.getCanonicalPath()}  -autosign  -automulpkg"
            println rootProject.packers["jiagubaoPath"]
            println "packerapk==============cmdLogin"
            execute360JiaGuCmd(cmdLogin)
            println "packerapk==============cmdImportSign"
            execute360JiaGuCmd(cmdImportSign)
            println "packerapk==============cmdShowmulpkg"
            execute360JiaGuCmd(cmdShowmulpkg)
            println "packerapk==============cmdDeletemulpkg"
            execute360JiaGuCmd(cmdDeletemulpkg)
            println "packerapk==============cmdShowmulpkg"
            execute360JiaGuCmd(cmdShowmulpkg)
            println "packerapk==============cmdImportmulpkg"
            execute360JiaGuCmd(cmdImportmulpkg)
            println "packerapk==============cmdShowmulpkg"
            execute360JiaGuCmd(cmdShowmulpkg)
            println "packerapk==============cmdJiaGu"
            execute360JiaGuCmd(cmdJiaGu)
            println "packerapk==============360jiagu end"
        }
    }

    //重命名安装包
    task packersApkRename() {
        group "packerapk"
        doLast {
            def packersApk = new File(rootProject.app['packersPath'])
            def packersPath = packersApk.getCanonicalPath()
            println "packerapk==============packersPath:${packersPath}"
            if (!packersApk.isDirectory()) {
                println "packerapk==============filePath not Directory , please check it"
                return
            }
            def filelist = packersApk.list()
            def fileNames
            def oldeFileName
            def apkFile
            def validApkcount = 0
            filelist.each { fileName ->
                oldeFileName = fileName
                println "packerapk==============${oldeFileName}"
                fileNames = fileName.split("_")
                println "packerapk=============fileNames.length:${fileNames.length}<=>fileNames:${fileNames}"
                if (fileName.endsWith(".apk") && fileNames.length == 6) {
                    fileName = "${fileNames[0]}_${fileNames[1]}_${fileNames[4]}.apk"
                    apkFile = new File(packersPath + "\\" + oldeFileName)
                    apkFile.renameTo(new File(packersPath + "\\" + fileName))
                    validApkcount++
                } else {
                    apkFile = new File(packersPath + "\\" + oldeFileName)
                    apkFile.delete()
                }
            }
            if (validApkcount > 0) {
                println "Rename succeeded! A total of ${validApkcount} installation packages have been completed."
            } else {
                println "Rename failed! Please check whether the file name conforms to the naming rules of online environment package!"
            }
        }
    }

    //一键加固大多渠道包
    task packersRelease() {
        group "packerapk"
        dependsOn packers360jiagu
        dependsOn packersApkRename
        packersApkRename.mustRunAfter(packers360jiagu)
        doLast {
            println "packerapk==============end"
        }
    }
}

def execute360JiaGuCmd(cmd) {
    def p = cmd.execute(null, new File(rootProject.packers["jiagubaoPath"]))
    println p.text
    p.waitFor()  // 用以等待外部进程调用结束
    println p.exitValue()
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
println("app build.gradle 配置完成")